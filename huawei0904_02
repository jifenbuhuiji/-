#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
#include <cmath>
#include <queue>

using namespace std;


/**
 * 0904第二题
 * 为每个数字建立哈希表这张哈希表起到存储的作用，然后为目标数字的关联数字建立哈希表
 * ，用于在遍历哈希表时跳过相关数字，模拟即可
*/
static bool compare(pair<int, int>&a, pair<int, int>&b)
{
    if(a.second > b.second)       return true;
    else if(a.second < b.second)  return false;
    else
    {
        return a.first < b.first;
    }
}

int main()
{
    int n, m, k, l;
    cin >> n >> m >> k >> l;
    int first, second;
    map<int, vector<int>> my_map;
    for(int i = 1; i <= n; i++)
    {
        my_map[i];
    }
    for(int i = 0; i < m; i++)
    {
        cin >> first >> second;
        my_map[first].push_back(second);
        my_map[second].push_back(first);
    }
    auto iter = my_map[k];
    map<int, int> cmp;
    for(int num : iter)
    {
        cmp[num]++;
    }
    vector<pair<int, int>> path;
    for(auto iter : my_map)
    {
        if(iter.first != k && !cmp.count(iter.first))
        {
            auto it = iter.second;
            int cnt = 0;
            for(int num : it)
            {
                if(cmp.count(num))
                    cnt++;
            }
            path.push_back(make_pair(iter.first, cnt));
        }
    }
    sort(path.begin(), path.end(), compare);
    int len = path.size();
    if(path.size() >= l)
    {
        for(int i = 0; i < l; i++)
        {
            cout << path[i].first << ' ';
        }
    }
    else
    {
        for(int i = 0; i < l; i++)
        {
            if(i < path.size())
                cout << path[i].first << ' ';
            else
                cout << 0 << ' ';
        }
    }
    cout << endl;
}
