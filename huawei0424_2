#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <map>
#include <stack>
#include <algorithm>
using namespace std;

class Person {
public :
    int id;
    int sum;
    int NumOne;
    vector<int> Zero;
};

int getsum(vector<int>nums)
{
    int sum = 0;
    for(int i : nums)
    {
        sum += i;
    }
    return sum;
}

int getNumOne(vector<int>nums)
{
    int ans = 0;
    int left = 0;
    for(int i = 0; i < nums.size() - 1; i++)
    {
        int len = 1;
        while(i + 1 < nums.size() && nums[i] == nums[i + 1] && nums[i])
        {
            len ++;
            i++;
        }
        ans = ans > len ? ans : len;
    }
    return ans;
}

vector<int> getVector(vector<int> nums)
{
    vector<int> path;
    for(int i = 0; i < nums.size(); i++)
    {
        if(nums[i] == 0)
            path.push_back(i);
    }
    return path;
}

static bool compare(Person& person1, Person& person2)
{
    if(person1.sum > person2.sum)   return 1;
    else if(person1.sum < person2.sum)  return 0;
    if(person1.NumOne > person2.NumOne) return 1;
    else if(person1.NumOne < person2.NumOne)  return 0;
    if(person1.sum == person2.sum && person1.NumOne == person2.NumOne)
    {
        int n = person1.Zero.size();
        int flag = 0;
        for(int i = 0; i < n; i++)
        {
            if(person1.Zero[i] < person2.Zero[i])
            {
                flag = 2;
                break;
            }
            else if(person1.Zero[i] == person2.Zero[i])
            {
                flag = 1;
                continue;
            }
            else if(person1.Zero[i] > person2.Zero[i])
            {
                flag = 3;
                break;
            }
        }
        if(flag == 2)   return false;
        if(flag == 3)   return true;
    }
    return person1.id < person2.id;
}

int main()
{
    int n, m;
    cin >> n >> m;
    vector<vector<int>> vec(n, vector<int>(m, 0));
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            cin >> vec[i][j];
        }
    }
    vector<Person> personList(n);
    for(int i = 0; i < n; i++)
    {
        int sum = getsum(vec[i]);
        int NumOne = getNumOne(vec[i]);
        personList[i].id = i;
        personList[i].sum = sum;
        personList[i].NumOne = NumOne;
        vector<int> Zero;
        Zero = getVector(vec[i]);
        personList[i].Zero = Zero;
    }
    sort(personList.begin(), personList.end(), compare);
    for(int i = 0; i < n; i++)
        cout << personList[i].id + 1 << ' ';
    cout << endl;
}
