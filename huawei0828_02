#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <map>
#include <unordered_set>
#include <stack>
#include <queue>
#include <climits>

using namespace std;

int Search(vector<int> vec, int target)
{
    int left = 0;
    int right = vec.size();
    while(left <= right)
    {
        int mid = left + (right - left)/2;
        if(vec[mid] < target)
        {
            left = mid + 1;
        }
        else if(vec[mid] >= target)
        {
            right = mid - 1;
        }
    }
    if(vec[left] == target)  return 1;
    else                     return 0;
}

static bool compare(pair<int, int>&a ,pair<int, int>& b)
{
    if(a.first > b.first)      return true;
    else if(a.first < b.first) return false;
    else
    {
        if(a.second <= b.second)
            return true;
        else    
            return false;
    }
}

int main()
{
    int n;
    vector<int> vec;
    while(cin >> n)
    {
        vec.push_back(n);
    }
    int interval = vec[vec.size() - 1];
    vec.pop_back();
    sort(vec.begin(), vec.end());
    int max = vec.back();
    vector<pair<int, int>> ans;
    for(int n : vec)
    {
        int num = 0;
        int temp = n;
        while(n <= max)
        {
            num += Search(vec, n);
            n += interval;
        }
        auto iter = make_pair(num, temp);
        ans.push_back(iter);
    }
    sort(ans.begin(), ans.end(), compare);
    cout << ans[0].second << endl;
}
